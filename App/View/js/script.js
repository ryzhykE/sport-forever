// Generated by CoffeeScript 1.8.0

/*
 * The script is encapsulated in an self-executing anonymous function,
 * to avoid conflicts with other libraries
 */

(function() {
  jQuery.noConflict();

  (function($) {

    /*
     ************************************************************************
     ******************************  $Content  ******************************
     * + Content
     *
     * + changeIconCollapse
     * + changeTooltipColorTo
     * + getFieldsData
     * + getTwitterFeed
     * + initAnimateOnAppear
     * + initChangeIconCollapse
     * + initChartJs
     * + initElevateZoom
     * + initFancyBoxSingleStore
     * + initFlickrFeed
     * + initIsotope
     * + initMaps
     * + initMenuAnimation
     * + initOwlCarousel
     * + initParallax
     * + initPieChart
     * + initRevolution
     * + initSliderRange
     * + initTooltip
     * + initTwitterFooter
     * + initTwitterSidebar
     * + initVideoBg
     * + refreshIsotope
     * + sendData
     * + sendForm
     * + showResults
     * + startBgVideo
     * + stopBgVideo
     * + 
     * + document.ready()
     * + windows.load()
     */
    var changeIconCollapse, changeTooltipColorTo, getFieldsData, getTwitterFeed, initAnimateOnAppear, initChangeIconCollapse, initChartJs, initElevateZoom, initFancyBoxSingleStore, initFlickrFeed, initFormsSend, initIsotope, initMaps, initMenuAnimation, initOwlCarousel, initParallax, initPieChart, initRevolution, initSliderRange, initTooltip, initTwitterFooter, initTwitterSidebar, initVideoBg, refreshIsotope, sendData, sendForm, showResults, startBgVideo, stopBgVideo;
    changeIconCollapse = function(e, icons) {
      var $emt, $ico, evt, hasCollapsing, hasIn;
      $emt = $(e.target).parents('.panel');
      $ico = $emt.find('h4 a i');
      evt = e.type;
      hasIn = $emt.find('.panel-collapse').hasClass('in');
      hasCollapsing = $emt.find('.panel-collapse').hasClass('collapsing');
      $ico.removeClass();
      if (hasCollapsing) {
        $ico.addClass(icons.hover);
        setTimeout(function() {
          hasIn = $emt.find('.panel-collapse').hasClass('in');
          if (hasIn) {
            $ico.addClass(icons.open);
          } else {
            $ico.addClass(icons.closed);
          }
          return null;
        }, 300);
      } else {
        if (evt === 'show') {
          $ico.addClass(icons.open);
        } else if (evt === 'hide') {
          $ico.addClass(icons.closed);
        } else if (evt === 'mouseenter') {
          $ico.addClass(icons.hover);
        } else if (evt === 'mouseleave') {
          if (hasIn) {
            $ico.addClass(icons.open);
          } else {
            $ico.addClass(icons.closed);
          }
        }
      }
      return null;
    };
    changeTooltipColorTo = function(color) {

      /*solution from: http://stackoverflow.com/questions/12639708/modifying-twitter-bootstraps-tooltip-colors-based-on-position */
      $('.tooltip-inner').css('background-color', color);
      $('.tooltip.top .tooltip-arrow').css('border-top-color', color);
      $('.tooltip.right .tooltip-arrow').css('border-right-color', color);
      $('.tooltip.left .tooltip-arrow').css('border-left-color', color);
      $('.tooltip.bottom .tooltip-arrow').css('border-bottom-color', color);
      return null;
    };
    getFieldsData = function($form) {
      var $fields, fieldsData;
      $fields = $form.find('input, textarea, select, button, keygen');
      fieldsData = [];
      $fields.each(function() {
        var name, required, tag, type, val, validate;
        name = $(this).attr('name');
        tag = $(this).get(0).tagName;
        required = typeof ($(this).data('required')) === 'undefined' ? false : true;
        validate = typeof ($(this).data('validate')) === 'undefined' ? false : true;
        if (tag === "TEXTAREA") {
          type = 'textarea';
        } else if (tag === "SELECT") {
          type = 'select';
        } else if (tag === "KEYGEN") {
          type = 'keygen';
        } else {
          type = $(this).attr('type');
          if (typeof type === 'undefined') {
            type = 'text';
          }
        }
        if (typeof name !== 'undefined') {
          val = $(this).val();
          if (type === 'checkbox' || type === 'radio') {
            if (!$(this).is(':checked')) {
              return true;
            }
          }
          return fieldsData.push({
            'name': name,
            'value': val,
            'type': type,
            'required': required,
            'validate': validate
          });
        }
      });
      return fieldsData;
    };
    getTwitterFeed = function(elm, twitter_user, count, template) {
      if ($(elm).length) {
        return $(elm).tweet({
          username: twitter_user,
          modpath: 'js/vendor/twitter/',
          count: count,
          loading_text: 'loading twitter feed...',
          join_text: "<br>@" + twitter_user + " - ",
          template: template,
          avatar_size: 60
        });
      }
    };
    initAnimateOnAppear = function(elm) {
      if ($(elm).length) {
        $(elm).appear(function() {
          var animation, animationDelay, elem;
          elem = $(this);
          animation = elem.data('animation');
          if (!elem.hasClass('visible')) {
            animationDelay = elem.data('animation-delay');
            if (animationDelay) {
              return setTimeout(function() {
                elem.addClass(animation + " visible");
                return null;
              }, animationDelay);
            } else {
              return elem.addClass(animation + " visible");
            }
          }
        });
      }
      return null;
    };
    initChangeIconCollapse = function(collapse, icons) {
      var heading;
      heading = collapse.find('.panel-heading');
      collapse.on('hide.bs.collapse', function(e) {
        changeIconCollapse(e, icons);
        return null;
      });
      collapse.on('show.bs.collapse', function(e) {
        changeIconCollapse(e, icons);
        return null;
      });
      heading.on('mouseenter', function(e) {
        changeIconCollapse(e, icons);
        return null;
      });
      heading.on('mouseleave', function(e) {
        changeIconCollapse(e, icons);
        return null;
      });
      return null;
    };
    initChartJs = function(canvas, type, data, options) {
      var ctx, defaultOpt, myNewChart;
      if (options == null) {
        options = {};
      }
      if ($(canvas).length) {
        ctx = $(canvas).get(0).getContext("2d");
        myNewChart = new Chart(ctx);
        defaultOpt = {
          scaleOverlay: false,
          scaleOverride: true,
          scaleSteps: 13,
          scaleStepWidth: 1,
          scaleStartValue: 1,
          scaleShowLabels: false,
          scaleShowGridLines: false,
          bezierCurve: false,
          pointDotRadius: 6
        };
        $.extend(defaultOpt, options);
        if (type === 'line') {
          myNewChart.Line(data, defaultOpt);
        }
        if (type === 'pie') {
          myNewChart.Pie(data, options);
        }
      }
      return null;
    };
    initElevateZoom = function(elm, gallery, borderColor, width, hight) {
      if ($(elm).length && $(window).width() >= 768) {
        $(elm).elevateZoom({
          gallery: gallery,
          borderColour: borderColor,
          cursor: 'pointer',
          easing: true,
          galleryActiveClass: 'active',
          responsive: true,
          scrollZoom: true,
          zoomWindowHeight: width,
          zoomWindowWidth: hight
        });
      }
      return null;
    };
    initFancyBoxSingleStore = function(elm) {
      if ($(elm).length) {
        $(elm).on('click', function(e) {
          var ez;
          ez = $(elm).data('elevateZoom');
          $.fancybox(ez.getGalleryList());
          return false;
        });
      }
      return null;
    };
    initFormsSend = function(form) {
      var $form;
      if ($(form).length) {
        $form = $(form);
        $form.on('submit', function(e) {
          if ($(this).data('ajax') === 1) {
            e.preventDefault();
            sendForm($(this));
          }
          return null;
        });
      }
      return null;
    };
    initFlickrFeed = function(div, id, limit, template) {
      if ($(div).length) {
        return $(div).jflickrfeed({
          limit: limit,
          qstrings: {
            id: id
          },
          itemTemplate: template
        });
      }
    };
    initIsotope = function(args) {
      var $container;
      $container = $(args.container);
      if (jQuery().isotope) {
        $container.isotope({
          itemSelector: args.selector
        });
        if (args.hasFilters) {
          $(args.filters).on('click', function(e) {
            e.preventDefault();
            $(args.filters).removeClass('active');
            $(this).addClass('active');
            return refreshIsotope(args, $container);
          });
        }
      }
      return null;
    };
    initMaps = function(elm, centerLat, centerLng, markerLat, markerLng) {
      var map;
      if ($(elm).length) {
        map = new GMaps({
          div: elm,
          lat: centerLat,
          lng: centerLng,
          disableDefaultUI: true
        });
        map.addMarker({
          lat: markerLat,
          lng: markerLng
        });
      }
      return null;
    };
    initMenuAnimation = function() {
      if ($(window).width() >= 768) {
        $('.dropdown').hover(function() {
          $(this).find('.dropdown-menu').first().stop(true, true).delay(100).fadeIn().slideDown('fast');
          return null;
        }, function() {
          $(this).find('.dropdown-menu').first().stop(true, true).delay(250).fadeOut().slideUp('slow');
          return null;
        });
      }
      return null;
    };
    initOwlCarousel = function(elm, params) {
      $(elm).owlCarousel(params);
      return null;
    };
    initParallax = function(elm) {
      if ($(elm).length) {
        $(elm).each(function() {
          var $obj;
          $obj = $(this);
          $(window).scroll(function() {
            var bgpos, yPos;
            if ($(document).width() > 500) {
              yPos = ($obj.offset().top - $(window).scrollTop()) / $obj.data('speed');
              bgpos = '50% ' + yPos + 'px';
              $obj.css('background-position', bgpos);
            } else {
              $obj.css('background-position', '50% 0px');
            }
            return null;
          });
          return null;
        });
      }
      return null;
    };
    initPieChart = function(chart, barColor, trackColor, lineWidth, size) {
      if ($(chart).length) {
        $(chart).easyPieChart({
          animate: 2000,
          barColor: barColor,
          trackColor: trackColor,
          scaleColor: false,
          lineWidth: lineWidth,
          lineCap: "square",
          size: size
        });
      }
      return null;
    };
    initRevolution = function() {
      var $banner, args;
      $banner = $('#slider-revolution');
      args = {
        'startheight:414,\nstartwidth:1500,\n\nfullWidth:"on",\nfullScreen:"off",\n\nshadow:0,\n\nonHoverStop: "on",\n\nhideThumbs:1,\nnavigationType: "none",\nnavigationHAlign: "center",\nnavigationVAlign: "bottom"\nnavigationStyle:"preview2",': 'startheight:414,\nstartwidth:1500,\n\nfullWidth:"on",\nfullScreen:"off",\n\nshadow:0,\n\nonHoverStop: "on",\n\nhideThumbs:1,\nnavigationType: "none",\nnavigationHAlign: "center",\nnavigationVAlign: "bottom"\nnavigationStyle:"preview2",',
        dottedOverlay: "none",
        delay: 16000,
        startwidth: 1170,
        startheight: 700,
        hideThumbs: 200,
        thumbWidth: 100,
        thumbHeight: 50,
        thumbAmount: 5,
        navigationType: "bullet",
        navigationArrows: "solo",
        navigationStyle: "preview2",
        touchenabled: "on",
        onHoverStop: "on",
        swipe_velocity: 0.7,
        swipe_min_touches: 1,
        swipe_max_touches: 1,
        drag_block_vertical: false,
        parallax: "mouse",
        parallaxBgFreeze: "on",
        parallaxLevels: [7, 4, 3, 2, 5, 4, 3, 2, 1, 0],
        keyboardNavigation: "off",
        navigationHAlign: "center",
        navigationVAlign: "bottom",
        navigationHOffset: 0,
        navigationVOffset: 20,
        soloArrowLeftHalign: "left",
        soloArrowLeftValign: "center",
        soloArrowLeftHOffset: 20,
        soloArrowLeftVOffset: 0,
        soloArrowRightHalign: "right",
        soloArrowRightValign: "center",
        soloArrowRightHOffset: 20,
        soloArrowRightVOffset: 0,
        shadow: 0,
        fullWidth: "on",
        fullScreen: "off",
        spinner: "spinner4",
        stopLoop: "off",
        stopAfterLoops: -1,
        stopAtSlide: -1,
        shuffle: "off",
        autoHeight: "off",
        forceFullWidth: "off",
        hideThumbsOnMobile: "off",
        hideNavDelayOnMobile: 1500,
        hideBulletsOnMobile: "off",
        hideArrowsOnMobile: "off",
        hideThumbsUnderResolution: 0,
        hideSliderAtLimit: 0,
        hideCaptionAtLimit: 0,
        hideAllCaptionAtLilmit: 0,
        startWithSlide: 0,
        videoJsPath: "rs-plugin/videojs/",
        fullScreenOffsetContainer: ""
      };
      if (jQuery().revolution) {
        $banner.show().revolution(args);
      }
      return null;
    };
    initSliderRange = function(elm, pre, app, min, max, step, val, tooltip) {
      if ($(elm).length) {
        $(elm).slider({
          range: true,
          min: min,
          max: max,
          value: val,
          step: step,
          tooltip: tooltip
        }).on('slide', function(ev) {
          var parent;
          parent = $(this).parent().parent();
          parent.find('.input_range.min').val(ev.value[0]);
          parent.find('.span_range.min').html(pre + ev.value[0] + app);
          parent.find('.input_range.max').val(ev.value[1]);
          parent.find('.span_range.max').html(pre + ev.value[1] + app);
          return null;
        });
      }
      return null;
    };
    initTooltip = function(elm, placement, color) {
      $(elm).tooltip({
        placement: placement
      });
      $(elm).hover(function() {
        return changeTooltipColorTo(color);
      });
      return null;
    };
    initTwitterFooter = function(elm, twitter_user) {
      var template;
      if ($(elm).length) {
        template = "{text}<span class='user'>@" + twitter_user + " - {time}</span>";
        getTwitterFeed(elm, twitter_user, 10, template);
        initOwlCarousel("" + elm + " ul", {
          items: 1,
          singleItem: true,
          slideSpeed: 300,
          paginationSpeed: 400,
          autoPlay: true,
          stopOnHover: true,
          navigation: true,
          navigationText: ["<i class='fa fa-arrow-left'></i>", "<i class='fa fa-arrow-right'></i>"],
          pagination: false
        });
      }
      return null;
    };
    initTwitterSidebar = function(elm, twitter_user) {
      var template;
      if ($(elm).length) {
        template = "<figure>{avatar}</figure> <p> <span class='user'>@" + twitter_user + "</span> {text} </p> <p>{time}</p>";
        getTwitterFeed(elm, twitter_user, 3, template);
      }
      return null;
    };
    initVideoBg = function(elm) {
      $(elm).on('click', function(e) {
        var $container, $over, $stop, $video, overInitLeft, video_src;
        e.preventDefault();
        $container = $(this).parent().parent();
        $over = $container.find('.over');
        overInitLeft = $over.css('left');
        $stop = $container.find('.stop');
        $video = $container.find('.yt-video iframe');
        video_src = $video.attr('src');
        startBgVideo($video, $over, $stop, video_src);
        return $stop.on('click', function(e) {
          e.preventDefault();
          stopBgVideo($(this), $video, $over, video_src, overInitLeft);
          return null;
        });
      });
      return null;
    };
    refreshIsotope = function(args, $container) {
      var $filters, selectors;
      $filters = $(args.filters + '.active');
      selectors = '';
      $filters.each(function(index) {
        if (selectors !== '') {
          selectors += ', ';
        }
        return selectors += $(this).attr('data-filter');
      });
      $container.isotope({
        filter: selectors
      });
      return null;
    };
    sendData = function(url, method, data, $form, callback) {
      var $btn, $response;
      $btn = $form.find('[type=submit]');
      $response = $form.find('.form-response');
      return $.ajax({
        beforeSend: function(objeto) {
          $response.html('');
          return null;
        },
        complete: function(objeto, exito) {
          return null;
        },
        data: 'json=' + JSON.stringify(data),
        success: function(dat) {
          return callback(dat, $response);
        },
        type: method,
        url: url
      });
    };
    sendForm = function($form) {
      var fieldsData, method, url;
      fieldsData = getFieldsData($form);
      url = $form.attr('action');
      method = $form.attr('method');
      sendData(url, method, fieldsData, $form, showResults);
      return null;
    };
    showResults = function(data, $response) {
      $response.html(data);
      return $response.find('.alert').slideDown('slow');
    };
    startBgVideo = function($video, $over, $stop, video_src) {
      var separator;
      if (video_src.indexOf('?') === '-1') {
        separator = '?';
      } else {
        separator = '&amp;';
      }
      $video.attr("src", "" + video_src + separator + "autoplay=1");
      $over.animate({
        left: '-150%'
      }, 500);
      $stop.show(0, function() {
        $stop.delay(3000).animate({
          opacity: 1
        }, 1000);
        return null;
      });
      return null;
    };
    stopBgVideo = function($stop, $video, $over, video_src, overInitLeft) {
      $video.attr('src', video_src);
      $over.animate({
        left: overInitLeft
      }, 500);
      $stop.delay(1000).animate({
        opacity: 0
      }, 1000, function() {
        $stop.hide();
        return null;
      });
      return null;
    };

    /* begin $( document ).ready() block. */
    $(function() {
      initAnimateOnAppear('.animated');
      initChangeIconCollapse($('#accordion'), {
        'closed': 'fa fa-plus-square-o',
        'open': 'fa fa-minus-square-o',
        'hover': 'fa fa-angle-down'
      });
      initChangeIconCollapse($('#accordion-sidebar'), {
        'closed': 'fa fa-plus',
        'open': 'fa fa-minus',
        'hover': 'fa fa-minus'
      });
      initChartJs('#linear-chart', 'line', {
        labels: ["10AM", "11AM", "12AM", "1PM", "2PM", "3PM", "4PM", "5PM", "6PM", "7PM", "8PM", "9PM"],
        datasets: [
          {
            fillColor: "rgba(0,0,0,0)",
            strokeColor: "#fc3031",
            pointColor: "#fc3031",
            pointStrokeColor: "#fff",
            data: [5, 3, 3, 5, 7, 8, 6, 6, 9, 8, 10, 12],
            label: [5, 3, 3, 5, 7, 8, 6, 6, 9, 8, 10, 12]
          }, {
            fillColor: "rgba(220,220,220,0)",
            strokeColor: "rgba(244,179,1,1)",
            pointColor: "rgba(244,179,1,1)",
            pointStrokeColor: "#fff",
            data: [3, 4, 4, 6, 2, 3, 3, 7, 3, 7, 11, 11],
            label: [3, 4, 4, 6, 2, 3, 3, 7, 3, 7, 11, 11]
          }
        ]
      });
      initChartJs('#pie-chart1', 'pie', [
        {
          value: 50,
          color: "#fc3031"
        }, {
          value: 50,
          color: "#ebebeb"
        }
      ]);
      initChartJs('#pie-chart2', 'pie', [
        {
          value: 75,
          color: "#fc3031",
          label: "Masculino"
        }, {
          value: 25,
          color: "#ebebeb",
          label: "Masculino"
        }
      ]);
      initElevateZoom("#img-single-store", "owl-store-single", "#fff", 430, 370);
      initFancyBoxSingleStore("#img-single-store");
      initFormsSend('form');
      initFlickrFeed('.flickr-feed', '9890806@N04', 8, '<li><a href="{{link}}" target="_blank"><img src="{{image_s}}" alt="//"></a></li>');
      initMaps('#map', 48.860093, 2.294694, 48.858093, 2.294694);
      initMenuAnimation();
      initOwlCarousel("#owl-partners", {
        items: 6,
        slideSpeed: 300,
        paginationSpeed: 400,
        navigation: false,
        pagination: false,
        autoPlay: true
      });
      initOwlCarousel("#owl-trainers", {
        items: 4,
        slideSpeed: 1000,
        paginationSpeed: 400,
        navigation: false,
        pagination: false,
        autoPlay: false
      });
      initOwlCarousel("#owl-classes", {
        items: 3,
        itemsDesktopSmall: [1199, 3],
        slideSpeed: 1000,
        paginationSpeed: 400,
        pagination: false,
        autoPlay: false,
        navigation: true,
        navigationText: ["<i class='fa fa-arrow-circle-o-left'></i>", "<i class='fa fa-arrow-circle-o-right'></i>"]
      });
      initOwlCarousel("#owl-store-single", {
        items: 3,
        itemsDesktopSmall: [1199, 3],
        itemsMobile: [479, 2],
        slideSpeed: 1000,
        paginationSpeed: 400,
        pagination: false,
        autoPlay: false,
        navigation: true,
        navigationText: ["<i class='fa fa-angle-left'></i>", "<i class='fa fa-angle-right'></i>"]
      });
      initParallax('.parallax');
      initPieChart('.class-experience-ring .chart', "#fc3031", "#ebebeb", 11, 110);
      initPieChart('.skills .chart', "#fc3031", "#ebebeb", 7, 190);
      initRevolution();
      initSliderRange('#slider-price .slider', '£', '', 1, 9300, 1, [1222, 9300], 'hide');
      initTooltip('.timetable a', 'top', '#3b464c');
      initTwitterFooter('#tweet-feed', 'Coralixthemes');
      initTwitterSidebar('#sidebar-tweet-feed', 'Coralixthemes');
      initVideoBg('#video-bg');
      return null;
    });

    /* end $( document ).ready() block. */

    /* begin $( window ).load() block. */
    $(window).load(function() {
      initIsotope({
        container: ".grid",
        selector: 'a',
        hasFilters: true,
        filters: '.filters a'
      });
      return $('#preloader').fadeOut('slow');
    });

    /* end $( window ).load() block. */
    return null;
  })(jQuery);

}).call(this);
